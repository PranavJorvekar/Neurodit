"""
Production-ready Python server that ONLY uses chatbot_infer.py neural network
No predefined responses - all responses come from the trained model.
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import sys
import warnings

# Suppress TensorFlow warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
warnings.filterwarnings('ignore')

# Import your actual chatbot inference functions
try:
    from chatbot_infer import load_model_and_tokenizer, generate_response
except ImportError:
    print("‚ùå Error: Could not import chatbot_infer.py")
    print("Make sure chatbot_infer.py and model files are in the correct location")
    sys.exit(1)

app = Flask(__name__)
CORS(app)

# Load model and tokenizer once when server starts
print("ü§ñ Loading neural network model and tokenizer...")
model, tokenizer = load_model_and_tokenizer()

if model is None or tokenizer is None:
    print("‚ùå Failed to load model or tokenizer. Check your model files.")
    sys.exit(1)

print("‚úÖ Neural network loaded successfully!")
print("üöÄ Catbot server ready - all responses will be generated by the neural network")

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        
        if not data or 'message' not in data:
            return jsonify({'error': 'No message provided'}), 400
        
        user_message = data['message'].strip()
        
        if not user_message:
            return jsonify({'error': 'Empty message'}), 400
        
        print(f"üß† Generating neural network response for: {user_message}")
        
        # ONLY use the actual neural network - no predefined responses
        response = generate_response(model, tokenizer, user_message)
        
        print(f"ü§ñ Neural network generated: {response}")
        
        return jsonify({
            'response': response,
            'status': 'success',
            'source': 'neural_network'
        })
        
    except Exception as e:
        print(f"‚ùå Neural network error: {e}")
        return jsonify({
            'error': 'Neural network failed to generate response',
            'status': 'error'
        }), 500

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        'status': 'healthy',
        'model_loaded': model is not None,
        'tokenizer_loaded': tokenizer is not None,
        'response_source': 'neural_network_only'
    })

if __name__ == '__main__':
    print("üåê Starting Catbot neural network server on http://localhost:5000")
    print("üì° All responses will be generated by the trained model")
    app.run(host='0.0.0.0', port=5000, debug=False)
