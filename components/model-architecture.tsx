"use client"

import { motion } from "framer-motion"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Line, LineChart, XAxis, YAxis, CartesianGrid, Legend, ResponsiveContainer } from "recharts"

export default function ModelArchitecture() {
  const metrics = [
    {
      name: "Validation Accuracy",
      value: "67.3%",
      description: "Performance on unseen data",
    },
    {
      name: "Training Accuracy",
      value: "72.1%",
      description: "Performance on training data",
    },
    {
      name: "Inference Time",
      value: "~0.3s",
      description: "Time to generate a response",
    },
    {
      name: "Sampling Strategy",
      value: "Top-K = 10",
      description: "Temperature = 0.8",
    },
  ]

  const trainingData = [
    { epoch: 1, training: 45.2, validation: 44.8 },
    { epoch: 2, training: 58.7, validation: 56.3 },
    { epoch: 3, training: 65.4, validation: 62.1 },
    { epoch: 4, training: 69.8, validation: 65.7 },
    { epoch: 5, training: 72.1, validation: 67.3 },
  ]

  return (
    <section className="py-12">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold mb-4">ðŸ§  Model Design & Performance</h2>
        <p className="text-zinc-400 max-w-2xl mx-auto">The neural architecture behind Catbot's intelligence</p>
      </div>

      <div className="mb-12">
        <Card className="bg-zinc-800 border-zinc-700">
          <CardHeader>
            <CardTitle className="text-center">Architecture Flowchart</CardTitle>
          </CardHeader>
          <CardContent className="flex justify-center">
            <div className="relative w-full max-w-3xl">
              <ArchitectureFlowchart />
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
        <Card className="bg-zinc-800 border-zinc-700">
          <CardHeader>
            <CardTitle>Key Metrics</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {metrics.map((metric, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  className="bg-zinc-700 p-4 rounded-lg"
                >
                  <h3 className="text-lg font-bold">{metric.name}</h3>
                  <p className="text-2xl font-bold text-red-500">{metric.value}</p>
                  <p className="text-zinc-400 text-sm">{metric.description}</p>
                </motion.div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-zinc-800 border-zinc-700">
          <CardHeader>
            <CardTitle>Training Performance</CardTitle>
          </CardHeader>
          <CardContent className="h-[300px]">
            <ChartContainer
              config={{
                training: {
                  label: "Training Accuracy",
                  color: "hsl(0, 100%, 50%)",
                },
                validation: {
                  label: "Validation Accuracy",
                  color: "hsl(0, 0%, 80%)",
                },
              }}
            >
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={trainingData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                  <XAxis dataKey="epoch" stroke="#888" />
                  <YAxis stroke="#888" domain={[40, 80]} />
                  <ChartTooltip content={<ChartTooltipContent />} />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="training"
                    stroke="var(--color-training)"
                    strokeWidth={2}
                    dot={{ r: 4 }}
                  />
                  <Line
                    type="monotone"
                    dataKey="validation"
                    stroke="var(--color-validation)"
                    strokeWidth={2}
                    dot={{ r: 4 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      </div>

      <div className="text-center">
        <p className="text-zinc-400">
          <strong>Note:</strong> All responses are generated by the neural network (no hardcoded logic)
        </p>
      </div>
    </section>
  )
}

function ArchitectureFlowchart() {
  const layers = [
    { name: "Input", color: "bg-zinc-600" },
    { name: "Embedding(96)", color: "bg-red-900" },
    { name: "BiLSTM(256)", color: "bg-red-800" },
    { name: "BiLSTM(128)", color: "bg-red-700" },
    { name: "LSTM(64)", color: "bg-red-600" },
    { name: "LSTM(32)", color: "bg-red-500" },
    { name: "TimeDistributed Dense", color: "bg-red-400" },
    { name: "Output", color: "bg-zinc-600" },
  ]

  return (
    <div className="flex flex-col items-center space-y-4 py-4">
      {layers.map((layer, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, x: -50 }}
          whileInView={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: index * 0.1 }}
          viewport={{ once: true }}
          className="relative"
        >
          <div className={`${layer.color} rounded-lg px-6 py-3 text-center min-w-[200px]`}>{layer.name}</div>
          {index < layers.length - 1 && (
            <div className="absolute left-1/2 transform -translate-x-1/2 h-4 w-0.5 bg-zinc-500"></div>
          )}
        </motion.div>
      ))}
    </div>
  )
}
